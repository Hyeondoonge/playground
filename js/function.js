// * 함수 정의라는 목적으로, 다른 방식으로 만들어진 함수들이 동일하게 동작하는 것은 아니다.

// 함수 선언식 vs 함수 표현식

// 1. 호이스팅
// 함수 선언식: 함수 표현식과 달리 '함수 호이스팅' 발생
// - 함수 선언식의 함수 호이스팅, 유연성 관점에선 좋지만, 일관적인 방식 X
func1();
function func1() {
  console.log('call func1');
}

// 함수 표현식: '변수 호이스팅'발생하지만 '함수 호이스팅' 발생하지 않음
// - 함수 표현식의 함수 호이스팅 X, 일관적인 작성 가능.
func2(); //  Cannot access 'func2' before initialization
const func2 = function () {
  console.log('call func2');
};

// 2. 스코프
// strict mode 라고 가정.
// 함수 선언식: 함수 선언문이 코드 블록 내 위치시, *블록 내* 어디서든 접근 가능
// 함수 표현식: 할당부를 코드블록 내 선언함으로써, 외부에서도 접근 가능하게 할 수 있음.

// 함수 선언식은 제한적인것에 비해 함수 표현식은, 할당부를 선언부와 따로 떼네어
// 블록 내 함수를 생성하여 외부 블록에서도 호출가능하게함.
